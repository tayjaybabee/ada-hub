#!/usr/bin/env python3


import inspy_logger
import logging

from pathlib import Path
from platform import system as os_family

from ada_hub.lib.constants import HOME_DIR, DEFAULT_DATA_ROOT
from ada_hub.lib.helpers.pid import write_pid
from ada_hub.lib.config import AdaHubConfig
from ada_hub import clean_exit
from ada_hub.lib.helpers.parser import parse_args


NAME = 'AdaHub'

get_logger = logging.getLogger


def test_connection():
    """

    A function to check if there's network connectivity. Basically an abstract for

    Returns:

    """
    from ada_hub.lib.helpers.network import conn_test

    return conn_test()


def start_logger(args):
    global get_logger

    is_verbose = False

    if args.verbose:
        is_verbose = True

    if args.debug:
        is_verbose = True

    device = inspy_logger.start(name='AdaHub', debug=is_verbose)
    device.debug('Logger started for AdaHub (raw device test)')
    log = logging.getLogger(f'{NAME}.start_logger')
    log.info('Started logger')

    return device


def main():
    from time import sleep
    """

    This is the script's main entry point. If you have to call a function of this script directly for some reason
    you'd call on this function.

    Returns:

    """
    args = parse_args()

    args.parse_args()

    mode = args.command

    log = start_logger(args)

    sleep(0.02)

    log.debug(f'Starting Ada Hub in mode: {mode.upper()}')
    log.debug(f'Started Ada Hub with the following command-line args: {args}')

    from ada_hub.errors import ConnectivityError

    config = AdaHubConfig(args)
    config = config.config

    if mode == 'credits':
        from ada_hub.lib.helpers.credits import third_party
        log.debug('Printing credits as directed...')
        third_party(config)
        log.debug('Exiting program')
        clean_exit(0, False)

    if args.data_dir:
        with open('conf_dir.txt', 'w') as f:
            f.write(args.data_dir)

    if args.data_dir is None:
        data_dir = DEFAULT_DATA_ROOT
    else:
        data_dir = args.data_dir

    connected = test_connection()

    if not connected:
        try:
            raise ConnectivityError('There seems to be no internet connection', err_type='No Connection')
        except ConnectivityError as e:
            log.error(e.message)

    pid_dir = str(f'{data_dir}run/')
    log.debug(f'Determined PID directory to be: {pid_dir}')
    write_pid(pid_dir)

    from ada_hub.lib.gui import GUIApp, GUIConfig

    gui_config = GUIConfig(config)

    GUIApp(gui_config.conf, args)


if __name__ == '__main__':
    main()
